{"version":3,"file":"bundle.user.js","mappings":"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","sources":["webpack://tampermonkey/./src/main.js","webpack://tampermonkey/./src/api.js","webpack://tampermonkey/./src/ui.js"],"sourcesContent":["// src/main.js\r\n\r\nimport { getAnswer, getHumanScore, saveDB } from \"./api.js\";\r\nimport { displayHumanElement } from \"./ui.js\";\r\n\r\n(function () {\r\n  \"use strict\";\r\n\r\n  let stop = false;\r\n  let interval;\r\n\r\n  // Helper to retrieve the stage frame element\r\n  function getStageFrame() {\r\n    return document.getElementById(\"stageFrame\") || null;\r\n  }\r\n\r\n  // Simulated submission function\r\n  function submitWriting(submitBtn, questions, answers) {\r\n    submitBtn.click();\r\n    console.log(\"Submit button clicked\");\r\n\r\n    setTimeout(async () => {\r\n      // Simulated human score; in a real scenario, you might calculate or fetch this value\r\n      const simulatedScore = 87;\r\n      displayHumanElement(simulatedScore, \"Human Score\", 170);\r\n      if (simulatedScore >= 90) {\r\n        await saveDB(questions, answers, simulatedScore);\r\n      }\r\n    }, 15000);\r\n  }\r\n\r\n  // Main automatic writing activation function\r\n  async function activateAutomaticWriting() {\r\n    console.log(\"Automatic writing activated\");\r\n\r\n    const stageFrame = getStageFrame();\r\n    if (!stageFrame) return;\r\n\r\n    interval = setInterval(async () => {\r\n      if (stop) {\r\n        console.log(\"Script stopped\");\r\n        clearInterval(interval);\r\n        return;\r\n      }\r\n\r\n      // Example: Check if the exam is complete (using a simulated status element)\r\n      const examStatus = document.getElementById(\"activity-status\")?.innerText;\r\n      if (examStatus === \"Complete\") {\r\n        stop = true;\r\n        clearInterval(interval);\r\n        return;\r\n      }\r\n\r\n      // Ensure CKEditor is available in the stage frame\r\n      if (!stageFrame.contentWindow?.CKEDITOR) {\r\n        console.log(\"CKEditor not available\");\r\n        return;\r\n      }\r\n\r\n      // If no external links are present, generate an answer\r\n      const links = stageFrame.contentDocument?.querySelectorAll(\r\n        \"#contentViewer #OnlineContent-Links .weblink\"\r\n      );\r\n\r\n      if (!links?.length) {\r\n        clearInterval(interval);\r\n        const textElement =\r\n          stageFrame.contentWindow.document.getElementById(\"journal-prompt\") ||\r\n          stageFrame.contentWindow.document.querySelector(\r\n            \".text-box-container\"\r\n          );\r\n        const editor =\r\n          stageFrame.contentWindow.CKEDITOR.instances[\"Answer\"] ||\r\n          stageFrame.contentWindow.CKEDITOR.instances[\"essay-Content\"];\r\n\r\n        editor.setData(\"Sit tight while Revolt generates a response... âœ¨\");\r\n\r\n        try {\r\n          const response = await getAnswer(textElement?.innerText);\r\n          const answer = response.humanizedText;\r\n          console.log(\"Answer generated:\", answer);\r\n          editor.setData(answer);\r\n\r\n          setTimeout(() => {\r\n            const submitBtn =\r\n              stageFrame.contentWindow.document.getElementById(\r\n                \"SubmitButton\"\r\n              ) ||\r\n              stageFrame.contentWindow.document.querySelector(\r\n                \".uibtn.uibtn-blue.uibtn-med.uibtn-alt\"\r\n              );\r\n            submitBtn.disabled = false;\r\n            submitWriting(submitBtn, textElement?.innerText, answer);\r\n          }, 1000);\r\n        } catch (error) {\r\n          console.error(\"Error fetching answer:\", error);\r\n        }\r\n      } else {\r\n        // If multiple links are present, you can implement a multi-question workflow here\r\n        console.log(\"Multiple links found. Custom handling required.\");\r\n        clearInterval(interval);\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  // Start the automatic writing process\r\n  activateAutomaticWriting();\r\n})();\r\n","// src/api.js\r\n\r\nexport async function getAnswer(prompt) {\r\n  return new Promise((resolve, reject) => {\r\n    GM_xmlhttpRequest({\r\n      method: \"POST\",\r\n      url: \"http://localhost:3000/api/process\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      data: JSON.stringify({ prompt }),\r\n      onload: function (response) {\r\n        if (response.status === 200) {\r\n          try {\r\n            const data = JSON.parse(response.responseText);\r\n            resolve(data);\r\n          } catch (e) {\r\n            reject(\"JSON parse error: \" + e);\r\n          }\r\n        } else {\r\n          reject(\"API failed with status: \" + response.status);\r\n        }\r\n      },\r\n      onerror: function (error) {\r\n        reject(\"API error: \" + error);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport async function getHumanScore(answers) {\r\n  return new Promise((resolve, reject) => {\r\n    GM_xmlhttpRequest({\r\n      method: \"POST\",\r\n      url: \"http://localhost:3000/api/process/human-score\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      data: JSON.stringify({ answers }),\r\n      onload: function (response) {\r\n        if (response.status === 200) {\r\n          try {\r\n            const data = JSON.parse(response.responseText);\r\n            console.log(\"Human Score:\", data);\r\n            resolve(data);\r\n          } catch (e) {\r\n            reject(\"JSON parse error: \" + e);\r\n          }\r\n        } else {\r\n          reject(\"API failed with status: \" + response.status);\r\n        }\r\n      },\r\n      onerror: function (error) {\r\n        reject(\"API error: \" + error);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport async function saveDB(question, answer, score) {\r\n  return new Promise((resolve, reject) => {\r\n    GM_xmlhttpRequest({\r\n      method: \"POST\",\r\n      url: \"http://localhost:3000/api/answer\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      data: JSON.stringify({ question, answer, score }),\r\n      onload: function (response) {\r\n        if (response.status === 200) {\r\n          try {\r\n            const data = JSON.parse(response.responseText);\r\n            console.log(\"Save DB response:\", data);\r\n            resolve(data);\r\n          } catch (e) {\r\n            reject(\"JSON parse error: \" + e);\r\n          }\r\n        } else {\r\n          reject(\"API failed with status: \" + response.status);\r\n        }\r\n      },\r\n      onerror: function (error) {\r\n        reject(\"API error: \" + error);\r\n      },\r\n    });\r\n  });\r\n}\r\n","// src/ui.js\r\n\r\nexport function displayHumanElement(score, text, bottom) {\r\n  // Get the stage frame element\r\n  const stageFrame = document.getElementById(\"stageFrame\");\r\n  if (!stageFrame) return;\r\n\r\n  // Add custom styles if not already present\r\n  if (!document.querySelector(\"#custom-human-style\")) {\r\n    const rect = stageFrame.getBoundingClientRect();\r\n    let style = document.createElement(\"style\");\r\n    style.id = \"custom-human-style\";\r\n    style.innerHTML = `\r\n      .human-container {\r\n          position: absolute;\r\n          left: ${rect.right + 20 + window.scrollX}px;\r\n          top: ${rect.bottom - 100 + window.scrollY}px;\r\n          z-index: 1000;\r\n          display: flex;\r\n          flex-direction: column;\r\n          background: rgba(24, 24, 27, 0.65);\r\n          padding: 10px;\r\n          border-radius: 12px;\r\n          font-size: 14px;\r\n          box-shadow: inset 0 1px, inset 0 0 0 1px rgba(255, 255, 255, 0.025);\r\n          width: 150px;\r\n          height: 100px;\r\n          text-align: center;\r\n      }\r\n      .human-title {\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: center;\r\n          gap: 4px;\r\n          color: white;\r\n      }\r\n      .human-circle-container {\r\n          position: relative;\r\n          width: 100px;\r\n          height: 60px;\r\n          margin: 0 auto;\r\n      }\r\n      .human-circle {\r\n          fill: transparent;\r\n          stroke-width: 10;\r\n          transition: stroke-dashoffset 1s linear, stroke 0.3s ease;\r\n      }\r\n      .human-text {\r\n          font-size: 40px;\r\n          font-weight: bold;\r\n          transition: opacity 0.5s ease-in-out, fill 0.3s ease;\r\n      }\r\n    `;\r\n    document.head.appendChild(style);\r\n  }\r\n\r\n  // Create the human score container\r\n  let container = document.createElement(\"div\");\r\n  container.className = \"human-container\";\r\n  container.innerHTML = `\r\n    <div class=\"human-title\">\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n            <path d=\"M2 12a5 5 0 0 0 5 5 8 8 0 0 1 5 2 8 8 0 0 1 5-2 5 5 0 0 0 5-5V7h-5a8 8 0 0 0-5 2 8 8 0 0 0-5-2H2Z\"></path>\r\n            <path d=\"M6 11c1.5 0 3 .5 3 2-2 0-3 0-3-2Z\"></path>\r\n            <path d=\"M18 11c-1.5 0-3 .5-3 2 2 0 3 0 3-2Z\"></path>\r\n        </svg>\r\n        ${text}\r\n    </div>\r\n    <div class=\"human-circle-container\">\r\n        <svg width=\"100\" height=\"60\" viewBox=\"0 0 120 120\">\r\n            <circle class=\"human-circle progress\" cx=\"60\" cy=\"60\" r=\"48\" stroke=\"gray\" stroke-dasharray=\"301.59\" stroke-dashoffset=\"301.59\" transform=\"rotate(-90 60 60)\"></circle>\r\n            <text x=\"50%\" y=\"50%\" text-anchor=\"middle\" dominant-baseline=\"middle\" class=\"human-text\" style=\"fill: gray;\">0</text>\r\n        </svg>\r\n    </div>\r\n  `;\r\n  document.body.appendChild(container);\r\n\r\n  // Animate the progress\r\n  let progressCircle = container.querySelector(\".progress\");\r\n  let scoreText = container.querySelector(\".human-text\");\r\n  let totalFrames = 60; // Approximately 1 second at 60fps\r\n  let frame = 0;\r\n\r\n  function animate() {\r\n    frame++;\r\n    let progress = Math.min(frame / totalFrames, 1);\r\n    let currentScore = Math.round(progress * score);\r\n    let offset = 301.59 - (currentScore / 100) * 301.59;\r\n\r\n    scoreText.textContent = currentScore;\r\n    progressCircle.style.strokeDashoffset = offset;\r\n\r\n    if (frame < totalFrames) {\r\n      requestAnimationFrame(animate);\r\n    } else {\r\n      progressCircle.style.stroke = \"green\";\r\n      scoreText.style.fill = \"white\";\r\n    }\r\n  }\r\n\r\n  requestAnimationFrame(animate);\r\n}\r\n"],"names":["interval","stop","async","console","log","stageFrame","document","getElementById","setInterval","clearInterval","examStatus","innerText","contentWindow","CKEDITOR","links","contentDocument","querySelectorAll","length","textElement","querySelector","editor","instances","setData","answer","prompt","Promise","resolve","reject","GM_xmlhttpRequest","method","url","headers","data","JSON","stringify","onload","response","status","parse","responseText","e","onerror","error","getAnswer","humanizedText","setTimeout","submitBtn","disabled","click","rect","getBoundingClientRect","style","createElement","id","innerHTML","right","window","scrollX","bottom","scrollY","head","appendChild","container","className","body","progressCircle","scoreText","frame","requestAnimationFrame","animate","progress","Math","min","currentScore","round","offset","textContent","strokeDashoffset","stroke","fill","displayHumanElement","submitWriting","activateAutomaticWriting"],"sourceRoot":""}